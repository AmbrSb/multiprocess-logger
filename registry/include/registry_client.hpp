#pragma once

#include <string>
#include <exception>
#include <memory>
#include <functional>
#include <cassert>

#include <unistd.h>

#include <gsl/pointers>

#include "registry_common.hpp"

namespace registry {

/**
 * This exception is throw to indicate that the gRPC stub
 * has returned an error status in response to a Registration
 * request.
 * 
 */
struct RegistrationException
    : public std::exception {};

/**
 * This class is used by process (Spring) that want to generate
 * data items and share them with other interested parties (Extractors).
 * This class is used for communicating with a Registry as
 * a Spring. It is not used generate data items.
 * 
 */
class SpringRegistryClient {
    public:
        SpringRegistryClient(std::string const& name,
                             RegistryLocation const&) noexcept;
        SpringRegistryClient(SpringRegistryClient const&) = delete;
        SpringRegistryClient(SpringRegistryClient const&&) = delete;
        SpringRegistryClient& operator=(SpringRegistryClient const&) = delete;
        SpringRegistryClient& operator=(SpringRegistryClient const&&) = delete;
        void publish(BufferLocation const& location) const;
        void unpublish(BufferLocation const& name) const;
        ~SpringRegistryClient() noexcept;

    private:
        class Impl;
        std::unique_ptr<Impl> const pimpl_;
        /**
         * The location of the Registry that is used to lookup
         * RegItems to find the Spring we are interested in.
         */
        RegistryLocation      const regloc_;
};

/**
 * This class is used by those that wnat to read the data items
 * generated by other Spring parties.
 * This class is used for communicating with a Registry as
 * an Extractor. It is not used read data items from other
 * Spring instances.
 * 
 */
class ExtractorRegistryClient {
    public:
        explicit ExtractorRegistryClient(RegistryLocation const&) noexcept;
        ExtractorRegistryClient(ExtractorRegistryClient const&) = delete;
        ExtractorRegistryClient(ExtractorRegistryClient const&&) = delete;
        ExtractorRegistryClient& operator=(ExtractorRegistryClient const&) = delete;
        ExtractorRegistryClient& operator=(ExtractorRegistryClient const&&) = delete;
        void register_callback(Filter, std::function<void()>);
        std::vector<RegItem> Lookup(Filter const&) const;
        ~ExtractorRegistryClient() noexcept;

    private:
        class Impl;
        std::unique_ptr<Impl> const pimpl_;
        /**
         * The location of the Registry that is used to lookup
         * RegItems to find the Spring we are interested in.
         */
        RegistryLocation const      regloc_;
};

} // namespace registry
